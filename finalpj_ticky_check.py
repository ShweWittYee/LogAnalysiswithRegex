"""
Introduction
Imagine your company uses a server that runs a service called ticky,
an internal ticketing system. The service logs events to syslog, 
both when it runs successfully and when it encounters errors.
The service's developers need your help getting some information
from those logs so that they can better understand how their software is used and how to improve it.
So, for this lab, you'll write some automation scripts that will process 
the system log and generate reports based on the information extracted from the log files.

Problem statement
Now, we're going to practice creating a script, named ticky_check.py, 
that generates two different reports from this internal ticketing system log file
i.e., syslog.log. This script will create the following reports:
    1) The ranking of errors generated by the system: 
    A list of all the error messages logged and how many times each error was found,
    sorted by the most common error to the least common error. 
    This report doesn't take into account the users involved.
    2) The user usage statistics for the service:
    A list of all users that have used the system, 
    including how many info messages and how many error messages they've generated.
    This report is sorted by username.
"""
import re
import operator
import csv
err_messages = {}
usr_stat = {}
logfile = "D:\\PythonScripts\\Google_Python_Automation\\Course2\\finalpj_syslog.log"
with open(logfile) as f:
    for line in f:
        if "ticky" not in line: # Comfirm 'ticky' is in line
            continue
        pattern_usr_stat = r"([A-Z]{4,5}) ([\w\'? ]*).*\(([\w.]*)\)" # regex pattern for user statistics
        result_usr_stat = re.search(pattern_usr_stat, line)
        category_error_info = result_usr_stat.group(1) # Group 1, ERROR or INFO
        usr = result_usr_stat.group(3) # Group 3, usernames
        #print(category_error_info + ", " + usr)
        #usr_stat[usr] = {} # Nested dictionary for user statistics is created.
        usr_stat.setdefault(usr, {"INFO" : 0, "ERROR": 0})
        if category_error_info == "INFO":
            usr_stat[usr]['INFO'] = usr_stat[usr]['INFO'] + 1
        else:
            usr_stat[usr]['ERROR'] = usr_stat[usr]['ERROR'] + 1
        pattern_err = r"ERROR ([\w\'? ]*)"
        result_err = re.search(pattern_err, line) # regex pattern for errror messages
        if result_err is None:
            continue
        err_mesg = result_err.group(1).strip()
        err_messages.setdefault(err_mesg, 0)
        err_messages[err_mesg] = err_messages[err_mesg] + 1
    err_messages = sorted(err_messages.items(), key= operator.itemgetter(1), reverse=True)
    usr_stat = sorted(usr_stat.items(), key = operator.itemgetter(0))
print("-----------Error Messsage-----------")
print(err_messages)
print("----------User Statistics-----------")
print(usr_stat)

# Writing to error_message.csv from err_messages variable
with open('error_message.csv', 'w', newline='') as error_out:
    csv_error_out = csv.writer(error_out)
    csv_error_out.writerow(['Error','Count'])
    for row in err_messages:
        csv_error_out.writerow(row)

# Writing to user_statistics.csv from usr_stat variable
with open('user_statistics.csv', 'w', newline='') as stat_out:
    csv_stat_out = csv.writer(stat_out)
    csv_stat_out.writerow(['Username','INFO','ERROR'])
    for row in usr_stat:
        # temporarily store values of usr_stat variable into a list
        temp_list = [row[0], row[1]['INFO'], row[1]['ERROR']]
        csv_stat_out.writerow(temp_list)